# ===== CRYPTON API Server Requirements =====
# FastAPI-based REST API for cloud deployment and mobile integration
# Version: 5.2.0

# ===== CORE CRYPTOGRAPHIC LIBRARIES (INHERITED FROM requirements.txt) =====
cryptography>=41.0.0
bcrypt>=4.0.0
argon2-cffi>=23.0.0
pynacl>=1.5.0
passlib[bcrypt,argon2]>=1.7.4

# ===== API FRAMEWORK & SERVER =====
fastapi>=0.104.0              # Modern, fast web framework
uvicorn[standard]>=0.24.0     # ASGI server for FastAPI
pydantic>=2.5.0               # Data validation with type hints

# ===== AUTHENTICATION & SECURITY =====
python-jose[cryptography]>=3.3.0  # JWT token handling
python-multipart>=0.0.6      # Form data parsing
passlib[bcrypt]>=1.7.4        # Password hashing utilities

# ===== HTTP & NETWORKING =====
httpx>=0.25.0                 # Modern HTTP client for testing
requests>=2.31.0              # Traditional HTTP library
urllib3>=2.1.0                # HTTP client library

# ===== PRODUCTION SERVER & DEPLOYMENT =====
gunicorn>=21.2.0              # Production WSGI/ASGI server
uvloop>=0.19.0                # Fast event loop (Unix only)
httptools>=0.6.0              # Fast HTTP parsing

# ===== DATABASE & CACHING (OPTIONAL) =====
redis>=5.0.0                  # Redis client for caching
sqlalchemy>=2.0.0             # SQL toolkit (if database needed)
alembic>=1.13.0               # Database migrations

# ===== CONFIGURATION & ENVIRONMENT =====
python-dotenv>=1.0.0          # Environment variable loading
pyyaml>=6.0.1                 # YAML configuration support
toml>=0.10.2                  # TOML configuration support

# ===== MONITORING & LOGGING =====
structlog>=23.2.0             # Structured logging
prometheus-client>=0.19.0     # Prometheus metrics
sentry-sdk[fastapi]>=1.38.0   # Error tracking and monitoring

# ===== API DOCUMENTATION =====
# FastAPI automatically generates OpenAPI/Swagger docs
# Additional documentation dependencies:
markdown>=3.5.0               # Markdown support for descriptions
pygments>=2.17.0              # Syntax highlighting

# ===== CLOUD DEPLOYMENT SUPPORT =====
# Uncomment based on your cloud provider:

# AWS Lambda:
# mangum>=0.17.0              # ASGI adapter for AWS Lambda

# Google Cloud Functions:
# functions-framework>=3.4.0  # Google Cloud Functions framework

# Azure Functions:
# azure-functions>=1.18.0     # Azure Functions runtime

# Heroku:
# psycopg2-binary>=2.9.7      # PostgreSQL adapter

# ===== DEVELOPMENT & TESTING =====
# Uncomment for development:

# Testing:
# pytest>=7.4.0              # Testing framework
# pytest-asyncio>=0.21.0     # Async testing support
# pytest-mock>=3.12.0        # Mocking support
# coverage>=7.3.0            # Code coverage

# API Testing:
# httpx>=0.25.0              # Async HTTP client for testing
# requests-mock>=1.11.0      # HTTP request mocking

# Code Quality:
# black>=23.9.0              # Code formatting
# flake8>=6.1.0              # Code linting
# mypy>=1.7.0               # Type checking
# isort>=5.12.0             # Import sorting

# ===== PERFORMANCE & OPTIMIZATION =====
orjson>=3.9.0                # Fast JSON serialization
ujson>=5.8.0                 # Ultra-fast JSON parser (alternative)

# ===== CORS & MIDDLEWARE =====
# CORS support is included in FastAPI
# Additional middleware:
starlette>=0.27.0            # Base framework for FastAPI

# ===== INSTALLATION INSTRUCTIONS =====
#
# DEVELOPMENT SETUP (macOS):
# pip3 install -r api_requirements.txt
# python3 -m uvicorn api_server:app --reload --host 0.0.0.0 --port 8000
#
# PRODUCTION SETUP (macOS):
# pip3 install -r api_requirements.txt
# python3 -m gunicorn api_server:app -w 4 -k uvicorn.workers.UvicornWorker
#
# HOMEBREW SETUP (recommended for macOS):
# brew install python3
# pip3 install -r api_requirements.txt
#
# DOCKER SETUP (macOS):
# docker build -t crypton-api .
# docker run -p 8000:8000 crypton-api
#
# VIRTUAL ENVIRONMENT (macOS):
# python3 -m venv venv
# source venv/bin/activate
# pip install -r api_requirements.txt  # pip works inside venv
#
# CLOUD DEPLOYMENT:
# See deployment/ directory for platform-specific configurations

# ===== API ENDPOINTS =====
#
# Core Endpoints:
# GET  /                     - API information
# GET  /health              - Health check
# GET  /algorithms          - List all algorithms
# GET  /algorithms/{name}   - Algorithm details
# POST /generate-key        - Generate encryption key
# POST /encrypt             - Encrypt data
# POST /decrypt             - Decrypt data
# POST /hash                - Hash data
# POST /hash-password       - Hash password
# POST /verify-password     - Verify password
#
# Documentation:
# GET  /docs                - Swagger UI
# GET  /redoc               - ReDoc documentation
# GET  /openapi.json        - OpenAPI schema

# ===== ENVIRONMENT VARIABLES =====
#
# Required:
# CRYPTON_SECRET_KEY=your-secret-key-here
#
# Optional:
# HOST=0.0.0.0
# PORT=8000
# ENVIRONMENT=production
# LOG_LEVEL=info
# REDIS_URL=redis://localhost:6379
# DATABASE_URL=postgresql://user:pass@localhost/crypton

# ===== PERFORMANCE BENCHMARKS =====
#
# Expected performance (on modern hardware):
# - Simple encryption: ~10,000 requests/sec
# - Hash operations: ~15,000 requests/sec
# - Key generation: ~1,000 requests/sec
# - Password verification: ~100 requests/sec (intentionally slow)
#
# Scaling recommendations:
# - Use multiple workers: gunicorn -w 4
# - Enable Redis caching for frequently used data
# - Use nginx reverse proxy for static content
# - Implement rate limiting for public APIs

# ===== SECURITY CONSIDERATIONS =====
#
# ✅ Input validation with Pydantic
# ✅ CORS protection configured
# ✅ JWT authentication ready
# ✅ Rate limiting support
# ✅ HTTPS enforcement in production
# ✅ Secure headers middleware
# ✅ Request size limits
# ✅ Error handling without information leakage
#
# PRODUCTION CHECKLIST:
# ⚠️  Change CRYPTON_SECRET_KEY
# ⚠️  Enable HTTPS with valid certificates
# ⚠️  Configure rate limiting
# ⚠️  Set up monitoring and alerting
# ⚠️  Enable request logging
# ⚠️  Configure CORS for your domain
# ⚠️  Set up database backups (if using)
# ⚠️  Configure firewall rules

# ===== MOBILE INTEGRATION =====
#
# React Native Example:
# const response = await fetch('http://your-api.com/encrypt', {
#   method: 'POST',
#   headers: { 'Content-Type': 'application/json' },
#   body: JSON.stringify({
#     algorithm: 'fernet',
#     data: 'Hello World',
#     key: 'your-generated-key'
#   })
# });
#
# Swift/iOS Example:
# let url = URL(string: "http://your-api.com/encrypt")!
# var request = URLRequest(url: url)
# request.httpMethod = "POST"
# request.setValue("application/json", forHTTPHeaderField: "Content-Type")
# let body = ["algorithm": "fernet", "data": "Hello World", "key": "your-key"]
# request.httpBody = try! JSONSerialization.data(withJSONObject: body)
#
# Android/Kotlin Example:
# val client = OkHttpClient()
# val json = """{"algorithm":"fernet","data":"Hello World","key":"your-key"}"""
# val body = json.toRequestBody("application/json".toMediaType())
# val request = Request.Builder()
#     .url("http://your-api.com/encrypt")
#     .post(body)
#     .build()

# ===== TROUBLESHOOTING =====
#
# Common Issues:
#
# 1. ImportError: No module named 'fastapi'
#    Solution: pip install -r api_requirements.txt
#
# 2. uvicorn: command not found
#    Solution: Ensure uvicorn is installed and in PATH
#
# 3. Port already in use
#    Solution: Change port or kill existing process
#
# 4. CORS errors in browser
#    Solution: Configure CORS origins in FastAPI app
#
# 5. High memory usage
#    Solution: Reduce worker count or optimize algorithms
#
# 6. Slow response times
#    Solution: Enable Redis caching, use async operations
#
# Support:
# - GitHub Issues: https://github.com/sarpataturker/crypton/issues
# - API Documentation: http://localhost:8000/docs
# - Health Check: http://localhost:8000/health

# ===== VERSION COMPATIBILITY =====
#
# Python 3.8+: ✅ Supported
# Python 3.9+: ✅ Recommended
# Python 3.10+: ✅ Optimal
# Python 3.11+: ✅ Best performance
#
# FastAPI 0.100+: ✅ Full feature support
# FastAPI 0.104+: ✅ Latest features
#
# All versions are tested for compatibility and security.