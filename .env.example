# ===== CRYPTON Environment Configuration =====
# Copy this file to .env and customize the values
# Version: 5.2.0

# ===== API SECURITY =====
# CRITICAL: Change this secret key for production!
CRYPTON_SECRET_KEY=your-super-secret-key-change-this-in-production-please

# API Environment
ENVIRONMENT=development
# Options: development, staging, production

# ===== SERVER CONFIGURATION =====
# Host and port for the API server
HOST=0.0.0.0
PORT=8000

# Log level
LOG_LEVEL=info
# Options: debug, info, warning, error, critical

# ===== DATABASE CONFIGURATION (OPTIONAL) =====
# Uncomment if using database features
# DATABASE_URL=postgresql://username:password@localhost:5432/crypton
# DATABASE_URL=mysql://username:password@localhost:3306/crypton
# DATABASE_URL=sqlite:///./crypton.db

# ===== REDIS CONFIGURATION (OPTIONAL) =====
# For caching and rate limiting
REDIS_URL=redis://localhost:6379/0
REDIS_PASSWORD=
REDIS_MAX_CONNECTIONS=20

# ===== MONITORING & LOGGING =====
# Sentry for error tracking (optional)
# SENTRY_DSN=https://your-sentry-dsn@sentry.io/project-id

# Prometheus metrics (optional)
PROMETHEUS_ENABLED=true
PROMETHEUS_PORT=9090

# ===== CORS CONFIGURATION =====
# Allowed origins for CORS (comma-separated)
CORS_ORIGINS=http://localhost:3000,http://localhost:8080,https://yourdomain.com
# For development, you can use: *
# For production, specify exact origins

# ===== RATE LIMITING =====
# Requests per minute per IP
RATE_LIMIT_REQUESTS=100
RATE_LIMIT_WINDOW=60

# ===== AUTHENTICATION (OPTIONAL) =====
# JWT token expiration (in hours)
ACCESS_TOKEN_EXPIRE_HOURS=24

# API Key authentication (optional)
# API_KEY_REQUIRED=false
# VALID_API_KEYS=key1,key2,key3

# ===== ENCRYPTION DEFAULTS =====
# Default algorithms for different operations
DEFAULT_SYMMETRIC_ALGORITHM=fernet
DEFAULT_HASH_ALGORITHM=sha256
DEFAULT_PASSWORD_ALGORITHM=bcrypt

# Default key sizes
DEFAULT_AES_KEY_SIZE=256
DEFAULT_RSA_KEY_SIZE=2048

# ===== FILE STORAGE =====
# Directory for temporary files and logs
DATA_DIRECTORY=./data
LOG_DIRECTORY=./logs
CACHE_DIRECTORY=./cache

# Maximum file size for uploads (in MB)
MAX_FILE_SIZE_MB=10

# ===== DOCKER CONFIGURATION =====
# Docker-specific settings
DOCKER_ENABLED=true
CONTAINER_NAME=crypton-api
DOCKER_NETWORK=crypton-network

# ===== CLOUD DEPLOYMENT =====
# AWS Configuration (if deploying to AWS)
# AWS_REGION=us-east-1
# AWS_ACCESS_KEY_ID=your-access-key
# AWS_SECRET_ACCESS_KEY=your-secret-key
# S3_BUCKET_NAME=crypton-data

# Google Cloud Configuration (if deploying to GCP)
# GOOGLE_CLOUD_PROJECT=your-project-id
# GOOGLE_APPLICATION_CREDENTIALS=path/to/service-account.json

# Azure Configuration (if deploying to Azure)
# AZURE_SUBSCRIPTION_ID=your-subscription-id
# AZURE_RESOURCE_GROUP=crypton-rg
# AZURE_STORAGE_ACCOUNT=your-storage-account

# ===== PERFORMANCE TUNING =====
# Number of worker processes
WORKERS=4

# Worker timeout (in seconds)
WORKER_TIMEOUT=30

# Maximum concurrent connections
MAX_CONNECTIONS=1000

# ===== DEVELOPMENT SETTINGS =====
# Enable auto-reload in development
AUTO_RELOAD=true

# Debug mode (shows detailed error messages)
DEBUG=false

# Enable API documentation
DOCS_ENABLED=true

# ===== TERMINAL APP SETTINGS =====
# Settings for the terminal application
TERMINAL_COLOR_ENABLED=true
TERMINAL_UNICODE_ENABLED=true
TERMINAL_AUTO_RESIZE=true

# Cache settings for smart installer
DEPS_CACHE_ENABLED=true
DEPS_CACHE_EXPIRY_DAYS=7

# ===== ALGORITHM SETTINGS =====
# bcrypt settings
BCRYPT_ROUNDS=12

# Argon2 settings
ARGON2_TIME_COST=2
ARGON2_MEMORY_COST=102400
ARGON2_PARALLELISM=8

# ===== SECURITY HEADERS =====
# Security headers for API responses
SECURITY_HEADERS_ENABLED=true
HSTS_MAX_AGE=31536000
CONTENT_SECURITY_POLICY=default-src 'self'

# ===== BACKUP CONFIGURATION =====
# Automatic backup settings (if applicable)
BACKUP_ENABLED=false
BACKUP_INTERVAL_HOURS=24
BACKUP_RETENTION_DAYS=30

# ===== NOTIFICATION SETTINGS =====
# Email notifications (optional)
# SMTP_HOST=smtp.gmail.com
# SMTP_PORT=587
# SMTP_USERNAME=your-email@gmail.com
# SMTP_PASSWORD=your-app-password
# ADMIN_EMAIL=admin@yourcompany.com

# Slack notifications (optional)
# SLACK_WEBHOOK_URL=https://hooks.slack.com/services/YOUR/SLACK/WEBHOOK

# ===== USAGE INSTRUCTIONS =====
#
# 1. Copy this file:
#    cp .env.example .env
#
# 2. Edit the .env file with your settings:
#    nano .env
#
# 3. Set required variables:
#    - CRYPTON_SECRET_KEY (generate a strong random key)
#    - ENVIRONMENT (development/production)
#    - HOST and PORT (if different from defaults)
#
# 4. For production, also set:
#    - CORS_ORIGINS (your domain)
#    - DATABASE_URL (if using database)
#    - SENTRY_DSN (for error tracking)
#    - Strong passwords and API keys
#
# 5. Keep .env file secure:
#    - Add .env to .gitignore
#    - Set proper file permissions (chmod 600 .env)
#    - Never commit .env to version control

# ===== SECURITY NOTES =====
#
# ⚠️  IMPORTANT SECURITY REMINDERS:
#
# 1. SECRET KEY:
#    - Generate a strong, random secret key
#    - Use at least 32 characters
#    - Include letters, numbers, and special characters
#    - Never reuse keys across environments
#
# 2. PASSWORDS:
#    - Use strong passwords for all services
#    - Enable 2FA where available
#    - Rotate passwords regularly
#
# 3. API KEYS:
#    - Generate unique API keys for each client
#    - Implement key rotation strategy
#    - Monitor key usage and revoke unused keys
#
# 4. NETWORK SECURITY:
#    - Use HTTPS in production
#    - Configure firewall rules
#    - Limit CORS origins to trusted domains
#    - Enable rate limiting
#
# 5. FILE PERMISSIONS:
#    chmod 600 .env
#    chown user:user .env

# ===== GENERATE SECRET KEY =====
#
# You can generate a secure secret key using:
#
# Python:
# python -c "import secrets; print(secrets.token_urlsafe(32))"
#
# OpenSSL:
# openssl rand -base64 32
#
# Node.js:
# node -e "console.log(require('crypto').randomBytes(32).toString('base64'))"
#
# Online (use with caution):
# https://www.allkeysgenerator.com/Random/Security-Encryption-Key-Generator.aspx

# ===== EXAMPLE CONFIGURATIONS =====
#
# DEVELOPMENT:
# ENVIRONMENT=development
# DEBUG=true
# AUTO_RELOAD=true
# CORS_ORIGINS=*
#
# STAGING:
# ENVIRONMENT=staging
# DEBUG=false
# AUTO_RELOAD=false
# CORS_ORIGINS=https://staging.yourapp.com
#
# PRODUCTION:
# ENVIRONMENT=production
# DEBUG=false
# AUTO_RELOAD=false
# CORS_ORIGINS=https://yourapp.com
# SENTRY_DSN=https://your-sentry-dsn@sentry.io/project

# ===== MONITORING SETUP =====
#
# For production monitoring, consider setting up:
# 1. Sentry for error tracking
# 2. Prometheus + Grafana for metrics
# 3. ELK stack for log analysis
# 4. Uptime monitoring service
# 5. Performance monitoring (New Relic, DataDog)

# ===== TROUBLESHOOTING =====
#
# Common issues:
#
# 1. "Environment variable not found"
#    - Ensure .env file exists in the same directory
#    - Check variable names for typos
#    - Restart the application after changes
#
# 2. "Permission denied"
#    - Check file permissions: ls -la .env
#    - Set correct permissions: chmod 600 .env
#
# 3. "Invalid secret key"
#    - Generate a new secret key
#    - Ensure no spaces or special characters cause issues
#
# 4. "Database connection failed"
#    - Verify DATABASE_URL format
#    - Check database server is running
#    - Verify credentials and permissions
#
# Need help? Check:
# - GitHub Issues: https://github.com/sarpataturker/crypton/issues
# - Documentation: ./docs/
# - API Health: http://localhost:8000/health